{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/basic-shell-commands/","result":{"data":{"site":{"siteMetadata":{"title":"Dave's Blog","author":"Dave Kelly","blogPrefix":"posts"}},"markdownRemark":{"id":"91b8780f-f70f-53f0-b0f2-516348f59004","excerpt":"_Prereq: install iTerm2 Open iterm2 and try out a few commands:  print the absolute path of the current directory.  change directory to the specified path. If…","html":"<p>_Prereq: install <a href=\"https://iterm2.com/\">iTerm2</a></p>\n<p>Open iterm2 and try out a few commands:</p>\n<p><code class=\"language-text\">pwd</code> print the absolute path of the current directory.</p>\n<p><code class=\"language-text\">cd</code> change directory to the specified path. If no path is specified, navigates to your home directory. A path can be specified to this command as a command line argument. For example: <code class=\"language-text\">cd mydir</code>. In a shell, terms are separated by whitespace. The first term specifies the command to run. Additional terms are called “arguments” and can be used to control the behavior of the command.</p>\n<p>Note about paths: <em>Absolute paths</em> always resolve to the same resource regardless of where you are when referencing the path. <em>Relative paths</em> resolve to the resource based on where you currently are.</p>\n<p>Consider the following directory structure</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/\n  Users\n    dan\n      Desktop\n      Documents\n        project1\n        project2\n        my project</code></pre></div>\n<p>If you are currently in your home directory <code class=\"language-text\">/Users/dan</code>, and want to navigate to the <code class=\"language-text\">project1</code> directory, you could take multiple approaches:</p>\n<ul>\n<li>Absolute path: <code class=\"language-text\">cd /Users/dan/Documents/project1</code> — This has the benefit of working from any current working directory, but can also be a lot to type depending on the path</li>\n<li>Relative path: <code class=\"language-text\">cd Documents/project1</code> — This is more concise, but requires you to know how to get to the directory from where you currently are</li>\n</ul>\n<p>There are a couple special “paths”:</p>\n<ul>\n<li><code class=\"language-text\">/</code> root directory - Think of your filesystem like a tree: all files in your filesystem are connected to the root directory through one or more parent directories</li>\n<li><code class=\"language-text\">.</code> current directory — This can be useful for relative paths: <code class=\"language-text\">cd ./Documents/project1</code> is equivalent to <code class=\"language-text\">cd Documents/project1</code></li>\n<li>\n<p><code class=\"language-text\">..</code> parent directory - This is important in traversing closer to the root directory:</p>\n<ul>\n<li>Try <code class=\"language-text\">cd ..</code> — Use <code class=\"language-text\">pwd</code> to confirm which directory you are now in</li>\n<li>You can chain these together to ascend multiple levels at once: Try <code class=\"language-text\">cd ../..</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">~</code> home directory — This is a reference to your user’s directory. If your username is <code class=\"language-text\">dan</code>, the command <code class=\"language-text\">cd ~</code> will navigate to <code class=\"language-text\">/Users/dan</code></li>\n</ul>\n<p>Question: What are three different ways to change to the home directory?</p>\n<p>Try to navigate to a directory with a space in the name: For example: <code class=\"language-text\">cd Documents/my project</code>\nNormally, we’d expect to not see much feedback from the cd command. For most shell commans, <em>no news is good news</em>. If you don’t see any feedback in your terminal, it usually means things are working correctly. In this case however, you might get an error!</p>\n<p>Remember: the shell uses whitespace to separate arguments for the cd command. Our directory has a space in the name so when we specify the directory, the shell treats it as two arguments. We need to “escape” the space in the name to tell the shell that the space is part of the same argument. We use the backslash <code class=\"language-text\">\\</code> to escape special characters: <code class=\"language-text\">cd Documents/my\\ project</code></p>\n<p><code class=\"language-text\">ls</code> TODO</p>\n<p><code class=\"language-text\">mkdir</code> TODO</p>\n<p><code class=\"language-text\">env</code> TODO</p>\n<p><code class=\"language-text\">ps</code> TODO</p>\n<p><code class=\"language-text\">kill</code> TODO</p>\n<p><code class=\"language-text\">open</code> TODO</p>","frontmatter":{"title":"Learn Basic Shell Commands","date":"December 08, 2022","description":"The most important shell commands for web application development"}}},"pageContext":{"slug":"/basic-shell-commands/","previous":{"fields":{"slug":"/learn-web-dev/"},"frontmatter":{"title":"Learn Web App Development — \"Syllabus\""}},"next":null}}}